<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1" ProductVersion="3.1.4024.9">
  <POU Name="FB_StepperCtrl" Id="{1ac61c09-9d3d-445e-812d-cb40648b96b4}" SpecialFunc="None">
    <Declaration><![CDATA[FUNCTION_BLOCK FB_StepperCtrl
VAR
// Axis 1 Stepper Motor Variables
	Axis					: TC2_MC2.AXIS_REF;			(* Reference the one axis being controlled *)
	fbPower_Axis			: MC_Power;					(* FB handles the drive power activation *)
	fbReset_Axis			: MC_Reset;					(* FB Resets the Axis *)
	fbHalt_Axis				: MC_Halt;					(* FB performs an axis halt operation *)
	fbStop_Axis				: MC_Stop;					(* FB performs an axis Stop operation *)
	fbJog_Axis				: MC_Jog;					(* FB allows to jog the axis CW or CCW *)
	fbRead_Position_Axis	: MC_ReadActualPosition;	(* FB reads the axis current position *)
	fbRead_Velocity_Axis	: MC_ReadActualVelocity;	(* FB reads the axis current velocity *)	
	fbSet_Position			: MC_SetPosition;
	fbMove_Absolute_Axis	: MC_MoveAbsolute;			(* FB carries out the axis absolute positioning *)
	fbMove_Relative_Axis	: MC_MoveRelative;

// Misc Variables
	goto_position			: LREAL;
END_VAR
VAR_INPUT
// Power Axis Input Variables
	bEnable					: BOOL;

// Reset Axis Input Variables
	bResetExe				: BOOL;
	
// Halt Axis Input Options
	bHaltExe				: BOOL;
	haltDecel				: LREAL;

// Stop Axis Input Variables
	bStopExe				: BOOL;
	bStopDecel				: LREAL;
	bStopJerk				: LREAL;

// Jog Axis Input Variables
	bJogFwd					: BOOL;
	bJogBack				: BOOL;
	jogPos					: LREAL;
	jogVel					: LREAL := 100;
	jogAccel				: LREAL := 10000;
	jogDecel				: LREAL := 10000;
	jogJerk					: LREAL := 60000;

// Set Position Input Variables
	bSetPosExe				: BOOL;
	setPosPost				: LREAL;

// Move Absolute Input Variables
	bMoveAbsExe				: BOOL;
	moveAbsPosition			: LREAL;
	moveAbsVel				: LREAL;
	moveAbsAccel			: LREAL := 10000;
	moveAbsDecel			: LREAL := 10000;
	moveAbsJerk				: LREAL := 60000;

// Relative Move Input Variables
	bMoveRelExe				: BOOL;
	moveRelDistance			: LREAL;
	moveRelVel				: LREAL;
	moveRelDist				: LREAL;
	moveRelAccel			: LREAL := 10000;
	moveRelDecel			: LREAL := 10000;
	moveRelJerk				: LREAL := 60000;
	
// Misc Input Variables
	sPosition				: STRING;
END_VAR
VAR_OUTPUT
// Power Axis Output Variables
	bPwrStatus				: BOOL;
	
// Reset Axis Output Variables
	bResetDone				: BOOL;
	bResetBusy				: BOOL;
	bResetError				: BOOL;
	resetErrorID			: UDINT;
	
// Halt Axis Output Variables
	bHaltDone				: BOOL;
	bHaltBusy				: BOOL;
	bHaltActive				: BOOL;
	bHaltCmdabort			: BOOL;
	bHaltError				: BOOL;
	haltErrorID				: UDINT;
	
// Stop Axis Output Variables
	bStopDone				: BOOL;
	bStopBusy				: BOOL;
	bStopActive				: BOOL;
	bStopCmdAbort			: BOOL;
	bStopError				: BOOL;
	stopErrorId				: UDINT;
	
// Jog Axis Output Variables
	bJogDone				: BOOL;
	bJogBusy				: BOOL;
	bJogActive				: BOOL;
	bJogAbort				: BOOL;
	bJogError				: BOOL;
	jogErrorID				: UDINT;
	
// Read Position Output Variables
	readPosActPosition		: LREAL;
	
// Read Velocity Output Variables
	readVelActVel			: LREAL;
	
// Set Position Output Variables
	bSetPosDone				: BOOL;
	bSetPosBusy				: BOOL;
	bSetPosError			: BOOL;
	SetPosErrorId			: UDINT;
	
// Move Absolute Output Variables
	bMoveAbsDone			: BOOL;
	bMoveAbsBusy			: BOOL;
	bMoveAbsActive			: BOOL;
	bMoveAbsAbort			: BOOL;
	bMoveAbsError			: BOOL;
	bMoveErrorID			: UDINT;
	
// Move Relative Output Variables
	bMoveRelDone			: BOOL;
	bMoveRelBusy			: BOOL;
	bMoveRelActive			: BOOL;
	bMoveRelCmdAbort		: BOOL;
	bMoveRelError			: BOOL;
	moveRelErrorID			: UDINT;
END_VAR]]></Declaration>
    <Implementation>
      <ST><![CDATA[///////////////////////////////////////////
// AXIS CONTROL
///////////////////////////////////////////

//moveRelDist := STRING_TO_LREAL(sPosition);

(* Enable signals are set *)
fbPower_Axis(
	Axis			:=	Axis,
	Enable			:=	bEnable,
	Enable_Positive	:= 	bEnable,
	Enable_Negative	:= 	bEnable,
	Override		:=	100.000,
	BufferMode		:=	,
	Options			:=	,
	Status			=>	bPwrStatus,
	Busy			=>	,
	Active			=>	,	
	Error			=>	,
	ErrorID			=>	);

(* Axis Reset *)
fbReset_Axis(
	Axis	:= 	Axis,
	Execute	:=	bResetExe,
	Done	=>	bResetDone,
	Busy	=>	bResetBusy,
	Error	=>	bResetError,
	ErrorID	=>	resetErrorID
);
(*
(* Check if Reset was done successfully *)
IF bReset_Done THEN
	bReset := FALSE;
	bMove_Absolute := FALSE;
	bMove_Jog := FALSE;
END_IF	
*)

(* Axis Halt *)
fbHalt_Axis(
	Axis			:= Axis,
	Execute			:= bHaltExe,
	Deceleration	:= haltDecel,
//	Jerk			:= lrJerk_Axis,
	BufferMode		:= MC_Aborting,
	Options			:= ,
	Done			=> bHaltDone,
	Busy			=> bHaltBusy,
	Active			=> bHaltActive,
	CommandAborted	=> bHaltCmdabort,
	Error			=> bHaltError,
	ErrorId			=> haltErrorID	
);
(*	
(* Check if Halt was done successfully *)
IF fbHalt.Done THEN
	bHalt 			:=	FALSE;
	bMove_Absolute	:=	FALSE;
	bMove_Jog		:=	FALSE;
	bTest			:=  TRUE;
END_IF
*)
	
(* Axis Stop *)
fbStop_Axis(
	Axis			:=	Axis,
	Execute			:=	bStopExe,
	Deceleration	:=	bStopDecel,
	Jerk			:=	bStopJerk,
	Options			:=	,
	Done			=>	bStopDone,
	Busy			=>	bStopBusy,
	Active			=>	bStopActive,
	CommandAborted	=>	bStopCmdAbort,
	Error			=>	bStopError,
	ErrorId			=> stopErrorId	
);		

	
(* Axis Jog. bJogFwd true is CW and bJogBack true is CCW *)
fbJog_Axis(
	Axis			:= 	Axis,
	JogForward		:= 	bJogFwd,
	JogBackwards	:= 	bJogBack,
	Mode			:=	MC_JOGMODE_STANDARD_FAST,
	Position		:=	jogPos,
	Velocity		:= 	jogVel,
	Acceleration	:= 	jogAccel,
	Deceleration	:= 	jogDecel,
	Jerk			:= 	jogJerk,
	Done			=>	bJogDone,
	Busy			=>	bJogBusy,
	Active			=>	bJogActive,
	CommandAborted	=> 	bJogAbort,
	Error			=> 	bJogError,
	ErrorId			=> 	jogErrorID
);

(* Get the current Position *)
fbRead_Position_Axis(
	Axis		:= 	Axis,
	Enable		:= 	TRUE,
	Valid		=>	,
	Busy		=> 	,
	Error		=> 	,
	ErrorID		=> 	,
	Position	=>	readPosActPosition
);

(* Get the current Velocity *)
fbRead_Velocity_Axis(
	Axis			:= 	Axis,
	Enable			:= 	TRUE,
	Valid			=>	,
	Busy			=> 	,
	Error			=> 	,
	ErrorID			=> 	,
	ActualVelocity	=>	readVelActVel
);

fbSet_Position(
	Axis := Axis,
	Execute := bSetPosExe,
	Position := setPosPost,
	Mode := FALSE,
	Done => bSetPosDone,
	Busy => bSetPosBusy,
	Error => bSetPosError,
	ErrorId => SetPosErrorID
);

(* Perform an Absolute Motion *)
fbMove_Absolute_Axis(
	Axis			:=	Axis,
	Execute			:= 	bMoveAbsExe,
	Position		:= 	moveAbsPosition,
	Velocity		:= 	moveAbsVel,
	Acceleration 	:= 	moveAbsAccel,
	Deceleration 	:= 	moveAbsDecel,
	Jerk			:= 	moveAbsJerk,
	BufferMode		:=	,
	Options			:=	,
	Done			=>	bMoveAbsDone,
	Busy			=>	bMoveAbsBusy,
	Active			=>	bMoveAbsActive,
	CommandAborted	=>	bMoveAbsAbort,
	Error			=>	bMoveAbsError,
	ErrorID			=>	bMoveErrorID,
);

fbMove_Relative_Axis(
	Axis := Axis,
	Execute := bMoveRelExe,
	Distance := moveRelDist,
	Velocity := moveRelVel,
	Acceleration := moveRelAccel,
	Deceleration := moveRelDecel,
	Jerk := moveRelJerk,
	BufferMode := ,
	Options := ,
	Done => bMoveRelDone,
	Busy => bMoveRelBusy,
	Active => bMoveRelActive,
	CommandAborted => bMoveRelCmdAbort,
	Error => bMoveRelError,
	ErrorID => moveRelErrorID
);

(*
(* Turn off all flags if axis not enabled *)
IF NOT bEnable THEN
	bReset			:=	FALSE;
	bHalt			:=	FALSE;
//	bMove_Absolute	:=	FALSE;
	bMove_Jog		:=	FALSE;
END_IF
*)
(*
(* Turn off all flags if axis not enabled *)
IF (bJogFwd = FALSE AND bJogBack = FALSE) THEN //OR bMove_Absolute = FALSE THEN
//	bStop			:=	TRUE;
	bHalt			:=	TRUE;
//	bMove_Absolute	:=	FALSE;
	bMove_Jog		:=	FALSE;
ELSE
//	bStop			:=	FALSE;
	bHalt			:=	FALSE;
END_IF
*)]]></ST>
    </Implementation>
    <LineIds Name="FB_StepperCtrl">
      <LineId Id="35" Count="2" />
      <LineId Id="359" Count="0" />
      <LineId Id="358" Count="0" />
      <LineId Id="360" Count="0" />
      <LineId Id="38" Count="22" />
      <LineId Id="436" Count="0" />
      <LineId Id="974" Count="0" />
      <LineId Id="61" Count="6" />
      <LineId Id="975" Count="0" />
      <LineId Id="68" Count="13" />
      <LineId Id="434" Count="0" />
      <LineId Id="440" Count="0" />
      <LineId Id="82" Count="7" />
      <LineId Id="441" Count="0" />
      <LineId Id="90" Count="13" />
      <LineId Id="233" Count="0" />
      <LineId Id="104" Count="18" />
      <LineId Id="148" Count="21" />
      <LineId Id="285" Count="0" />
      <LineId Id="284" Count="0" />
      <LineId Id="286" Count="1" />
      <LineId Id="291" Count="0" />
      <LineId Id="295" Count="2" />
      <LineId Id="302" Count="1" />
      <LineId Id="300" Count="0" />
      <LineId Id="855" Count="17" />
      <LineId Id="854" Count="0" />
      <LineId Id="558" Count="0" />
      <LineId Id="557" Count="0" />
      <LineId Id="560" Count="0" />
      <LineId Id="562" Count="1" />
      <LineId Id="568" Count="1" />
      <LineId Id="571" Count="0" />
      <LineId Id="574" Count="1" />
      <LineId Id="577" Count="2" />
      <LineId Id="581" Count="0" />
      <LineId Id="583" Count="0" />
      <LineId Id="585" Count="0" />
      <LineId Id="589" Count="0" />
      <LineId Id="591" Count="0" />
      <LineId Id="588" Count="0" />
      <LineId Id="292" Count="0" />
      <LineId Id="171" Count="6" />
      <LineId Id="235" Count="0" />
      <LineId Id="178" Count="9" />
      <LineId Id="9" Count="0" />
      <LineId Id="236" Count="0" />
    </LineIds>
  </POU>
</TcPlcObject>