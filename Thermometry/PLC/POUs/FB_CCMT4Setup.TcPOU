<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1" ProductVersion="3.1.4024.12">
  <POU Name="FB_CCMT4Setup" Id="{dacf3ea6-efea-4034-9158-b13f569d654f}" SpecialFunc="None">
    <Declaration><![CDATA[FUNCTION_BLOCK FB_CCMT4Setup
VAR_INPUT
	mainSwitch					: WORD := 3000;
	mainSwitchData				: WORD;
	opMode						: WORD := 3001;
	opModeData					: WORD := 1;
	valveConfig					: WORD := 3131;
	valveConfigData				: WORD := 22;
	refrigerantType				: WORD := 3071;
	refrigerantTypeData			: WORD := 28;
	mbMainSwitch				: WORD := 4045;
	mbMainSwitchData			: WORD := 1;
	manMode						: WORD := 4035;
	manModeData					: WORD := 1;
	manModeTimeout				: WORD := 3176;
	manModeTimeoutData			: WORD := 3600;
	
	f_state						: UINT := 1;
	f_nextState					: UINT;//:= 0;
	f_mbReadAddr				: WORD; //:= 4067;
	f_mbWriteAddr 				: WORD;//:= 16#D000;
	f_mbWriteData 				: WORD;
END_VAR
VAR_OUTPUT
	f_mbReadData				: WORD;
	bSetupComplete				: BOOL := 0;
END_VAR
VAR
//	f_mbMaster					: ModbusRtuMaster_KL6x22B;
	idx							: WORD;
	f_mbInputAddr 				: WORD;//:= 16#D000;
	f_mbInputData 				: WORD;
	f_mbUnit					: BYTE := 1;
	f_mbErrorId					: MODBUS_ERRORS;
	f_mbErrorFlag				: BOOL;
	f_mbBusy					: BOOL;
	f_mbBytesRec				: UINT;
	f_inputs					: ARRAY [0..1, 16#00 .. 16#26] OF UINT;
END_VAR]]></Declaration>
    <Implementation>
      <ST><![CDATA[CASE f_state OF

1: // write register
	mainSwitchData := 0;
	GVL.f_mbMaster.WriteSingleRegister(
		UnitID:= f_mbUnit, 
		Quantity:= 1, 
		MBAddr:= mainSwitch, 
		cbLength:= SIZEOF(mainSwitchData), 
		pMemoryAddr:= ADR(mainSwitchData), 
		Execute:= TRUE, 
		Timeout:= T#1S, 
		BUSY=> f_mbBusy, 
		Error=> f_mbErrorFlag, 
		ErrorId=> f_mbErrorId, 
		cbRead=> f_mbBytesRec
	);

	// write complete
	IF f_mbBusy = FALSE THEN
		// reset comms
		GVL.f_mbMaster.ReadRegs(Execute := FALSE);
		f_nextState := 2;
		f_state := f_nextState;
		// catch error
		IF f_mbErrorFlag = TRUE THEN
			f_state := 10;
		END_IF
	END_IF
2:
GVL.f_mbMaster.WriteSingleRegister(
		UnitID:= f_mbUnit, 
		Quantity:= 1, 
		MBAddr:= opMode, 
		cbLength:= SIZEOF(opModeData), 
		pMemoryAddr:= ADR(opModeData), 
		Execute:= TRUE, 
		Timeout:= T#1S, 
		BUSY=> f_mbBusy, 
		Error=> f_mbErrorFlag, 
		ErrorId=> f_mbErrorId, 
		cbRead=> f_mbBytesRec
	);

	// write complete
	IF f_mbBusy = FALSE THEN
		// reset comms
		GVL.f_mbMaster.ReadRegs(Execute := FALSE);
		f_nextState := 3;
		f_state := f_nextState;
		// catch error
		IF f_mbErrorFlag = TRUE THEN
			f_state := 10;
		END_IF
	END_IF
3:
GVL.f_mbMaster.ReadRegs(
		UnitID:= f_mbUnit, 
		Quantity:= 1, 
		MBAddr:= valveConfig, 
		cbLength:= SIZEOF(valveConfigData), 
		pMemoryAddr:= ADR(valveConfigData), 
		Execute:= TRUE, 
		Timeout:= T#1S, 
		BUSY=> f_mbBusy, 
		Error=> f_mbErrorFlag, 
		ErrorId=> f_mbErrorId, 
		cbRead=> f_mbBytesRec
	);

	// read complete
	IF f_mbBusy = FALSE THEN
		// reset comms
		GVL.f_mbMaster.ReadRegs(Execute := FALSE);
		f_nextState := 4;
		f_state := f_nextState;
		// catch error
		IF f_mbErrorFlag = TRUE THEN
			f_state := 10;
		END_IF
	END_IF
4:
	GVL.f_mbMaster.ReadRegs(
		UnitID:= f_mbUnit, 
		Quantity:= 1, 
		MBAddr:= refrigerantType, 
		cbLength:= SIZEOF(refrigerantTypeData), 
		pMemoryAddr:= ADR(refrigerantTypeData), 
		Execute:= TRUE, 
		Timeout:= T#1S, 
		BUSY=> f_mbBusy, 
		Error=> f_mbErrorFlag, 
		ErrorId=> f_mbErrorId, 
		cbRead=> f_mbBytesRec
	);

	// read complete
	IF f_mbBusy = FALSE THEN
		// reset comms
		GVL.f_mbMaster.ReadRegs(Execute := FALSE);
		f_nextState := 5;
		f_state := f_nextState;
		// catch error
		IF f_mbErrorFlag = TRUE THEN
			f_state := 10;
		END_IF
	END_IF
5:
	GVL.f_mbMaster.ReadRegs(
		UnitID:= f_mbUnit, 
		Quantity:= 1, 
		MBAddr:= mbMainSwitch, 
		cbLength:= SIZEOF(mbMainSwitchData), 
		pMemoryAddr:= ADR(mbMainSwitchData), 
		Execute:= TRUE, 
		Timeout:= T#1S, 
		BUSY=> f_mbBusy, 
		Error=> f_mbErrorFlag, 
		ErrorId=> f_mbErrorId, 
		cbRead=> f_mbBytesRec
	);

	// read complete
	IF f_mbBusy = FALSE THEN
		// reset comms
		GVL.f_mbMaster.ReadRegs(Execute := FALSE);
		f_nextState := 6;
		f_state := f_nextState;
		// catch error
		IF f_mbErrorFlag = TRUE THEN
			f_state := 10;
		END_IF
	END_IF
6:
GVL.f_mbMaster.ReadRegs(
		UnitID:= f_mbUnit, 
		Quantity:= 1, 
		MBAddr:= manMode, 
		cbLength:= SIZEOF(manModeData), 
		pMemoryAddr:= ADR(manModeData), 
		Execute:= TRUE, 
		Timeout:= T#1S, 
		BUSY=> f_mbBusy, 
		Error=> f_mbErrorFlag, 
		ErrorId=> f_mbErrorId, 
		cbRead=> f_mbBytesRec
	);

	// read complete
	IF f_mbBusy = FALSE THEN
		// reset comms
		GVL.f_mbMaster.ReadRegs(Execute := FALSE);
		f_nextState := 7;
		f_state := f_nextState;
		// catch error
		IF f_mbErrorFlag = TRUE THEN
			f_state := 10;
		END_IF
	END_IF
7:
GVL.f_mbMaster.ReadRegs(
		UnitID:= f_mbUnit, 
		Quantity:= 1, 
		MBAddr:= manModeTimeout, 
		cbLength:= SIZEOF(manModeTimeoutData), 
		pMemoryAddr:= ADR(manModeTimeoutData), 
		Execute:= TRUE, 
		Timeout:= T#1S, 
		BUSY=> f_mbBusy, 
		Error=> f_mbErrorFlag, 
		ErrorId=> f_mbErrorId, 
		cbRead=> f_mbBytesRec
	);

	// read complete
	IF f_mbBusy = FALSE THEN
		// reset comms
		GVL.f_mbMaster.ReadRegs(Execute := FALSE);
		f_nextState := 8;
		f_state := f_nextState;
		// catch error
		IF f_mbErrorFlag = TRUE THEN
			f_state := 10;
		END_IF
	END_IF
8:
	mainSwitchData := 1;
	GVL.f_mbMaster.ReadRegs(
		UnitID:= f_mbUnit, 
		Quantity:= 9, 
		MBAddr:= mainSwitch, 
		cbLength:= SIZEOF(mainSwitchData), 
		pMemoryAddr:= ADR(mainSwitchData), 
		Execute:= TRUE, 
		Timeout:= T#1S, 
		BUSY=> f_mbBusy, 
		Error=> f_mbErrorFlag, 
		ErrorId=> f_mbErrorId, 
		cbRead=> f_mbBytesRec
	);

	// read complete
	IF f_mbBusy = FALSE THEN
		// reset comms
		GVL.f_mbMaster.ReadRegs(Execute := FALSE);
		f_nextState := 9;
		f_state := f_nextState;
		// catch error
		IF f_mbErrorFlag = TRUE THEN
			f_state := 10;
		END_IF
	END_IF
9:
	bSetupComplete := 1;
10:

END_CASE]]></ST>
    </Implementation>
    <LineIds Name="FB_CCMT4Setup">
      <LineId Id="37" Count="2" />
      <LineId Id="268" Count="0" />
      <LineId Id="40" Count="24" />
      <LineId Id="68" Count="25" />
      <LineId Id="97" Count="25" />
      <LineId Id="139" Count="24" />
      <LineId Id="138" Count="0" />
      <LineId Id="165" Count="24" />
      <LineId Id="164" Count="0" />
      <LineId Id="191" Count="24" />
      <LineId Id="190" Count="0" />
      <LineId Id="217" Count="24" />
      <LineId Id="216" Count="0" />
      <LineId Id="243" Count="0" />
      <LineId Id="270" Count="0" />
      <LineId Id="244" Count="23" />
      <LineId Id="242" Count="0" />
      <LineId Id="271" Count="1" />
      <LineId Id="126" Count="1" />
      <LineId Id="9" Count="0" />
    </LineIds>
  </POU>
</TcPlcObject>